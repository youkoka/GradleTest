package com.mitake.build.controller;

import java.io.File;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.mitake.build.object.StateCode;
import com.mitake.build.object.Statement;

@Controller
public class ServiceController extends BaseController{

	private String tomcatSavePath;
	private String ShellScriptPath;
	
	@RequestMapping(value="/buildService")
	public ResponseEntity<Void> buildService() {
		
		ResponseEntity<Void> response = null;
		
        try {

        	tomcatSavePath = (new File(this.getClass().getResource("/").getFile())).getParentFile().getParent();
        	
        	ShellScriptPath = tomcatSavePath + File.separatorChar + "WEB-INF" + File.separatorChar + "ShellScript" + File.separatorChar;
        	
        	String projectAbsoluteFolder = props.getProperties("projectFolderPath");
        	
        	//! ------  需要調整到UI介面參數 ------
        	String jsonData ="{\"svn\":[{\"link\":\"https://svn-server.mitake.com.tw:443/svn/apptech/main/SECOM/DRID/iOS/trunk\", \"dest\":\"/SECOM\"},{\"link\":\"https://svn-server.mitake.com.tw:443/svn/apptech/main/Mitake/MMBLibrary/branches/MMBLibrary_1.11.4\", \"dest\":\"/MMBLibrary_1.11.4\"}]}";
    		
    		String svnUser = "yehengjia";
        	String svnPassword = "!gaga0606";
        	
        	String projectFolder = projectAbsoluteFolder + "/SECOM/SECOM";
        	
        	String projectScheme = "SECOM";
        	
        	String projectTarget = "SECOM";
        	
        	//------------------------------------
        	
        	JSONObject jsonObj = new JSONObject(jsonData);
    		
    		JSONArray jsonAry = jsonObj.getJSONArray("svn");
    		
    		for(int i = 0; i < jsonAry.length(); i++) {
    			
    			JSONObject obj = jsonAry.getJSONObject(i);
    			
    			String svnLink = obj.getString("link");
    			String svnDest = projectAbsoluteFolder + obj.getString("dest");
    			
    			if(executeSvnlinkScript("checkout", svnLink, svnDest, svnUser, svnPassword)) {
            		
        			//! xcode build
    	        	if(!executeXcodebuildScript(projectFolder, "", "", projectScheme, projectTarget)) {
    	        		
    	        	}
            	}
            	else {
            		
            		System.out.println("executeSvnlinkScript execute failed!");
            		logger.warn("executeSvnlinkScript execute failed!");
            	}
    		}
        
            response = new ResponseEntity<Void>(HttpStatus.OK);

        } catch (Exception e) {

            e.printStackTrace();
        }

        return response;
	}
	
	/*
	argument
	1.<cmd, ex:ls, update, checkout> 2.<svn link> 3.<username> 4.<password>
	or
	1.<cmd, ex:ls, update, checkout> 2.<svn link> 3.<dest path> 4.<username> 5.<password>
	*/
	private boolean executeSvnlinkScript(String cmd, String svnLink,  String destPath, String username, String password) {
		
		boolean reVal = true;
		
		//! svn
    	String svnlink_sh = props.getProperties("svnlink_sh");
    	
    	String svnlinkShPath = ShellScriptPath + svnlink_sh;
    	
		File svnlinkShFile = new File(svnlinkShPath);
		
		if(svnlinkShFile.exists()) {
    		
			svnlinkShFile.setExecutable(true);
			
			Statement stat1 = new Statement();
	    	stat1.cmdLine = new String[]{svnlinkShPath, cmd, svnLink, destPath, username, password};
	    	
	    	ArrayList<Statement> stAry = new ArrayList<Statement>();
	    	stAry.add(stat1);
	
	    	for (Statement statement : stAry) {
				
	    		StateCode code = statement.onStart();
	    		
	    		if(code == StateCode.TriggerSuccess) {
	            	
	        		System.out.println("success");
	        	}
	        	else {
	        		
	        		reVal = false;
	        		System.out.println(statement.getErrorMsg());
	        		logger.warn("statement : " + statement.getErrorMsg());
	        		break;
	        	}
			}
    	}
		else {
			
			reVal = false;
    		logger.warn(svnlinkShPath + "not exist!");
    		System.out.println(svnlinkShPath + "not exist!");
		}
		return reVal;
	}
	/*
	argument
	1. xcode project path
	2. ipa output folder
	3. ipa name
	*/
	private boolean executeXcodebuildScript(
			String projectPath,
			String destIPAFolder,
			String ipaName,
			String scheme,
			String target) {
	
		boolean reVal = true;
		
		String xcodebuild_sh = props.getProperties("xcodebuild_sh");
    	
    	String xcodebuildShPath = ShellScriptPath +  xcodebuild_sh;
    	
		File xcodebuildShFile = new File(xcodebuildShPath);
    	
    	if(xcodebuildShFile.exists()) {
    		
    		xcodebuildShFile.setExecutable(true);
	    	
	    	Statement stat1 = new Statement();
	    	stat1.cmdLine = new String[]{xcodebuildShPath, projectPath, destIPAFolder, ipaName, scheme, target};
	    	
	    	ArrayList<Statement> stAry = new ArrayList<Statement>();
	    	stAry.add(stat1);
	
	    	for (Statement statement : stAry) {
				
	    		StateCode code = statement.onStart();
	    		
	    		if(code == StateCode.TriggerSuccess) {
	            	
	        		System.out.println("success");
	        	}
	        	else {
	        		
	        		reVal = false;
	        		System.out.println(statement.getErrorMsg());
	        		logger.warn("statement : " + statement.getErrorMsg());
	        		break;
	        	}
			}
    	}
    	else {
    		
    		reVal = false;
    		logger.warn(xcodebuildShPath + "not exist!");
    		System.out.println(xcodebuildShPath + "not exist!");
    	}
    	
		return reVal;
	}
}
